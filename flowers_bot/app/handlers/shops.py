from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from fastapi.logger import logger

from app.states import CreateShopState
import httpx
from app.config import BACKEND_API_URL
from app.keyboards import get_shop_buttons

router = Router()

@router.callback_query()
async def debug_callback(callback: types.CallbackQuery):
    logger.info(f"Callback data: {callback.data}")
    await callback.message.answer(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"
@router.message(StateFilter(default_state), lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
async def start_create_shop(message: types.Message, state: FSMContext):
    await state.clear()

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–¥–æ–º–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:")
    await state.set_state(CreateShopState.waiting_for_subdomain)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@router.callback_query(lambda c: c.data.startswith("shop:"))
async def shop_actions(callback: types.CallbackQuery):
    logger.info(f"Callback data received: {callback.data}")
    shop_id = callback.data.split(":")[1]

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{shop_id}")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{shop_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_shops")]
    ])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω ID: {shop_id}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
@router.callback_query(lambda c: c.data == "list_shops")
async def back_to_list(callback: types.CallbackQuery):
    await list_shops(callback.message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@router.callback_query(lambda c: c.data.startswith("edit:"))
async def edit_shop(callback: types.CallbackQuery):
    shop_id = callback.data.split(":")[1]
    await callback.message.edit_text(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ID: {shop_id}. –ü–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@router.callback_query(lambda c: c.data.startswith("delete:"))
async def delete_shop(callback: types.CallbackQuery):
    shop_id = callback.data.split(":")[1]

    # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
    try:
        async with httpx.AsyncClient(follow_redirects=True) as client:
            response = await client.delete(f"{BACKEND_API_URL}/shops/{shop_id}")
            response.raise_for_status()
        await callback.message.edit_text(f"–ú–∞–≥–∞–∑–∏–Ω ID: {shop_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        await list_shops(callback.message)
    except Exception:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(StateFilter(default_state), lambda message: message.text == "üõç –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
async def list_shops(message: types.Message, state: FSMContext):
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –±—ç–∫–µ–Ω–¥–∞
    try:
        async with httpx.AsyncClient(follow_redirects=True) as client:
            response = await client.get(f"{BACKEND_API_URL}/shops/")
            response.raise_for_status()
            print(response.json())
            shops = response.json()

        if not shops:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
        markup = get_shop_buttons(shops)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=markup)
    except Exception as e:
        logger.error(e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–¥–¥–æ–º–µ–Ω–∞
@router.message(StateFilter(CreateShopState.waiting_for_subdomain))
async def enter_subdomain(message: types.Message, state: FSMContext):
    subdomain = message.text.strip()

    if not subdomain.isalnum():
        await message.answer("–ü–æ–¥–¥–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(subdomain=subdomain)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX (–Ω–∞–ø—Ä–∏–º–µ—Ä, #FF5733):")
    await state.set_state(CreateShopState.waiting_for_color)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–∫—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
@router.message(StateFilter(CreateShopState.waiting_for_color))
async def enter_color(message: types.Message, state: FSMContext):
    color = message.text.strip()

    if not (len(color) == 7 and color.startswith("#") and all(c in "0123456789ABCDEFabcdef" for c in color[1:])):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç HEX —Ü–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(color=color)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    await state.set_state(CreateShopState.waiting_for_logo)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
@router.message(StateFilter(CreateShopState.waiting_for_logo))
async def enter_logo(message: types.Message, state: FSMContext):
    if message.content_type == "photo":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]
        file_id = photo.file_id
    elif message.content_type == "document" and message.document.mime_type.startswith("image/"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        file_id = message.document.file_id
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º).")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    file = await message.bot.download_file(file_path)

    # –î–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ FSM
    data = await state.get_data()
    subdomain = data["subdomain"]
    color = data["color"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥
    try:
        async with httpx.AsyncClient(follow_redirects=True) as client:
            files = {"logo": ("logo.jpg", file, "image/jpeg")}
            payload = {"subdomain": subdomain, "color": color}
            response = await client.post(f"{BACKEND_API_URL}/shops/", data=payload, files=files)
            response.raise_for_status()

        await message.answer(f"–ú–∞–≥–∞–∑–∏–Ω '{subdomain}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except httpx.HTTPStatusError as http_err:
        if http_err.response.status_code == 400:
            error_detail = http_err.response.json().get("detail", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await message.answer(f"–û—à–∏–±–∫–∞: {error_detail}")
        else:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {http_err}")
    except Exception:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞")
    finally:
        await state.clear()
