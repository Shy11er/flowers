import asyncio
import logging
from app.bot import bot
from utils.api import get_orders
from app.config import TG_USER_IDS
from typing import List

TELEGRAM_MESSAGE_LIMIT = 4096

def split_message(message: str, limit: int = TELEGRAM_MESSAGE_LIMIT) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç."""
    if len(message) <= limit:
        return [message]

    parts = []
    while len(message) > limit:
        split_index = message.rfind("\n", 0, limit)
        if split_index == -1:
            split_index = limit
        parts.append(message[:split_index])
        message = message[split_index:].strip()

    if message:
        parts.append(message)

    return parts

async def send_new_orders():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    while True:
        try:
            orders = await get_orders()
            print(orders)
            if orders:
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")

                user_tg_ids = get_user_tg_ids()

                for order in orders:
                    for tg_id in user_tg_ids:
                        await send_order_message(tg_id, order)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")

        await asyncio.sleep(60)
        
async def send_order_message(tg_id: int, order: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ Telegram, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ."""
    message = format_order_message(order)
    parts = split_message(message)

    for part in parts:
        await bot.send_message(chat_id=tg_id, text=part)
        
def format_order_message(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    items = "\n".join(
        [f"- {item['name']} (x{item['quantity']}): {item['price']} ‚ÇΩ" for item in order["items"]]
    )
    
    return (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"üÜî ID: {order['id']}\n"
        f"üë§ –ò–º—è: {order['full_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone_number']}\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order['recipient_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {order['recipient_phone']}\n"
        f"üèôÔ∏è –ê–¥—Ä–µ—Å: {order['city']}, {order['street']}, {order['house']}, "
        f"{order.get('building', '')}, {order.get('apartment', '')}\n"
        f"üöö –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_method']}\n"
        f"üìÖ –î–∞—Ç–∞: {order['delivery_date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {order['delivery_time']}\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order['wishes']}\n"
        f"üíå –¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ: {order['card_text']}\n"
        f"üì¶ –¢–æ–≤–∞—Ä—ã:\n{items}\n"
        f"üü¢ –°—Ç–∞—Ç—É—Å: {order['status']}\n"
    )

def get_user_tg_ids() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    return TG_USER_IDS
